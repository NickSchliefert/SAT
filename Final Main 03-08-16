import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import urllib
import feedparser
import matplotlib.dates as mdates
from matplotlib import style
from matplotlib.figure import Figure
from tkinter import *
import webbrowser

'''
Initliase the main GUI window where everything is stored,
define the dimensions of the window,
and set the title of the window.
'''
window = Tk()
window.geometry('259x464')
window.title('Neutron Finance')
window.configure(background = '#B1F59A')

# Create a text heading and define its placement within the grid
menu_heading = Label(window, text = 'MENU', font = 'bold', relief = RIDGE, width = 20, borderwidth = 5)
menu_heading.grid(row = 0, column = 0, columnspan = 2, pady = 2)

# Create a variable assigned to the location of an image, and then change its proportions (the higher the number/s, the smaller)
historical_graph_photo1 = PhotoImage(file = 'Images\\finances.png')
historical_graph_photo2 = historical_graph_photo1.subsample(11, 11)

# Create a variable for the main image of the menu, and define its placement within the grid
main_photo = Label(window, image = historical_graph_photo1)
main_photo.grid(row = 6, columnspan = 2, pady = 3)

def historical_graph(event):
    ''' This function creates a new window within the main window, passes an event(left mouse click), and creates a text heading'''

    # Create a sub-window for the historical graph function. Make it so that other windows cannot be clicked, change the title of the window, and set its colour.
    root = Toplevel(window)
    root.grab_set()
    root.title('Historical Graph')
    root.configure(background = '#B1F59A')

    def bytespdate2num(fmt, encoding = 'utf-8'):
        ''' This function decodes the UNIX data format to a legible structure, and is needed due to the Matplotlib module.'''

        # 'fmt' equals format, which is the format of the date stamp ('%Y%m%d'), encoding is 'utf-8', which is needed for the internet data.

        # The string converter is equal to strip date to number, based on the format.
        strconverter = mdates.strpdate2num(fmt)

        def bytesconverter(bytes):
            ''' This function converts the bytes of data, using the utf-8 encoding.'''

            # Create the variable to equal the decoded bytes
            string = bytes.decode(encoding)
            # Return the decoded data string
            return strconverter(string)
        # Return the decoded data
        return bytesconverter

    def graph_data(stock_ticker):
        ''' This function is to grab data for a specific inputted stock ticker from the Yahoo! Finance API.'''

        try:
            # Define the variable of the stock data url, where the data is grabbed from.
            stock_price_url = 'http://chartapi.finance.yahoo.com/instrument/1.0/'+stock_ticker+'/chartdata;type=quote;range=10y/csv'
            # Define the variable that uses the urrlib module and opens the stock price url to read and utilise.
            source_code = urllib.request.urlopen(stock_price_url).read().decode()
            # Create a blank list to store the stock data pulled from the Yahoo! API.
            stock_data = []
            # Split the data pulled from the Yahoo! API (source_code) with a new line.
            split_source = source_code.split('\n')

            '''
            Because the source code data we want has 6 items (date, close price, high price, low price, open price, and volume of stock),
            that are split by commas, we need to filter out all other lines without these characteristics.
            This filters every line out that does not contain stock data, so that only stock data is appended to the list.
            '''
            for line in split_source:
                # So, for each line in the source code, split with a comma,
                split_line = line.split(',')
                # and if the length of the line is 6 items,
                if len(split_line) == 6:
                    # and if the values and labels are not in the line, append the data to the stock_data list
                    if 'values' not in line and 'labels' not in line:
                        stock_data.append(line)

            '''
            Load the 6 items of data from the stock_data list using numpy. State the delimiter, and to unpack the data.
            Using the converter function created above (bytespdate2num), convert the date (index 0 equals the date) from the yyyy:mm:dd structure, to a legible structure.
            '''
            date, closep, highp, lowp, openp, volume = np.loadtxt(stock_data, delimiter = ',', unpack = True, converters = {0: bytespdate2num('%Y%m%d')})
            '''
            Date structure and format:
            # %Y = full year 2015
            # %y = partial year 15
            # %m = number month
            # %H = hours
            # %M = minutes
            # %S = seconds
            # 12-06-2014 = %m-%d-%Y
            '''
        # If an error arises, output a message to the user to enter a valid input
        except:
            error_message = Message(root, text='Please input a stock ticker in the entry box.', width=150, borderwidth=5, justify=LEFT, relief=RAISED)
            error_message.grid(row=4, column=0, pady=2)
        # If there is no error, continue the program
        else:
            # State the plot figure so that it can be modified
            fig = plt.figure()
            fig.canvas.set_window_title('{0} stock price over time.'.format(stock_ticker))
            # Create the first subplot, with a 1 by 1 grid and the starting point of the grid as 0 by 0
            ax1 = plt.subplot2grid((1, 1), (0, 0))

            # For the x axis 1 subplot, plot the date and the close price of the stock. '-' plots the data as a line, and label is the legend label
            ax1.plot_date(date, closep, '-', label = 'Price')
            # For the dates on the x axis, get the tick labels (each date label, e.g jan 2012, feb 2012, etc.)
            for label in ax1.xaxis.get_ticklabels():
            # Rotate each label by 45 degrees
                label.set_rotation(45)
            # Set a grid for the x axis 1 subplot.
            ax1.grid(True)
            # Set the color of both axis labels
            ax1.xaxis.label.set_color('teal')
            ax1.yaxis.label.set_color('teal')

            # Set the color of the labels for profit and loss
            ax1.plot([], [], linewidth = 5, label = 'Loss', color = 'crimson', alpha = 0.5)
            ax1.plot([], [], linewidth = 5, label = 'Profit', color = 'limegreen', alpha = 0.5)

            '''
            Set the graph to fill the space between the date and the close price with either green or red, indicating profit or loss above/below the initial stock price.
            Can also fill between date and price bought the stock at (Profit and Loss). Change '0' to variable 'bought_price', and the graph will fill based on that number,
            e.g. ax1.fill_between(date, closep, 0, alpha = 0.3).
            '''
            ax1.fill_between(date, closep, closep[0], where = (closep > closep[0]), facecolor = 'limegreen', alpha=0.5)
            ax1.fill_between(date, closep, closep[0], where=(closep < closep[0]), facecolor='crimson', alpha=0.5)

            # Set the x and y axis labels, the title of the graph, and add a plot legend
            plt.xlabel('Date')
            plt.ylabel('Price ($)')
            plt.title('{0} price over time' .format(stock_ticker))
            plt.legend()
            # Set the subplot parameters, so that labels aren't going off the plot, etc. 'wspace' equals width space, and 'hspace' equals height space (padding between figures when multiple are used)
            plt.subplots_adjust(left = 0.16, bottom = 0.20, right = 0.94, top = 0.90, wspace = 0.2, hspace = 0)

            # Output the graph to the user
            plt.show()

    def entry_handling():
        '''This function validates the input of the entry box, and if there is nothing entered, an error is outputted until a value is'''

        # Create a variable that equals the input from the entry widget
        company_ticker = company_ticker_entry.get()
        # Convert the input into a string
        company_ticker = str(company_ticker)
        # Convert the string into uppercase
        company_ticker = company_ticker.upper()

        # If the entry box is empty, output a message to the user to enter a valid input
        if company_ticker == '':
            error_message = Message(root, text='Please input a valid stock ticker in the entry box.', width=150, borderwidth=5, justify=LEFT, relief=RAISED)
            error_message.grid(row=4, column=0, pady=2)
        # If there is no error, continue the program
        else:
            graph_data(company_ticker)

    # Create the label of the heading
    historical_heading = Label(root, text='Historical graph', font='bold', relief=RIDGE, width=15, borderwidth=7)
    historical_heading.grid(row=0, column=0, columnspan=5, pady=2.5)

    # Create the message of the text instructing the user of what to do
    historical_message = Message(root, text="Enter a stock ticker below to see a company's stock price data over time! E.g. 'AAPL' for Apple.", width = 260, bg = '#B1F59A')
    historical_message.grid(row=1, column=0)

    # Create the entry widget where the user enters a stock ticker, and define its location within the grid
    company_ticker_entry = Entry(root)
    company_ticker_entry.grid(row = 2, column = 0, padx = 5, pady = 5)

    # Create the button that the user presses when they wish to graph the data of the stock ticker they inputted in the entry widget
    graph_button = Button(root, text = 'GRAPH', command = entry_handling, width = 10)
    graph_button.grid(row = 3, column = 0, pady = 3)


    def ticker_list(event):
        '''This function opens the document in Google Drive that has a list of stock tickers, when an event occurs.'''

        webbrowser.open_new(r'https://docs.google.com/spreadsheets/d/1T-ZbfnxZUkXu-jC1_FFxX0c-_7AbJqJuizzdjH81UR4/edit?usp=sharing')

    # Create a label that the user can click to open a document in their web browser
    stock_ticker_link = Label(root, text='For a comprehensive collection of company stock tickers, please click this text.', bg='#B1F59A', width=60)
    stock_ticker_link.grid(row=5, column=0)
    # When the user clicks the text/label, run the function to open the document
    stock_ticker_link.bind('<Button-1>', ticker_list)

    def navigation_tutorial(event):
        '''This function opens the Matplotlib page with the navigation toolbar tutorial, when an event occurs.'''

        webbrowser.open_new(r'http://matplotlib.org/users/navigation_toolbar.html')

    # Create a label that the user can click to open the page in their web browser
    navigation_tutorial_link = Label(root, text="For a tutorial explaining how to use the historical graph's navigation bar, please click this text.", bg='#B1F59A', width=71)
    navigation_tutorial_link.grid(row=6, column=0)
    # When the user clicks the text/label, run the function to open the page
    navigation_tutorial_link.bind('<Button-1>', navigation_tutorial)

'''
Create a button and set its parameters,
define its placement within the grid,
and bind the button to an event (left mouse click) that calls a function.
'''
historical_graph_button = Button(window, image = historical_graph_photo2, compound = LEFT, text = 'Graph historical stock data', width = 180)
historical_graph_button.grid(row = 1, columnspan=2, pady = 1)
historical_graph_button.bind('<Button-1>', historical_graph)


# Create a variable assigned to the location of an image, and then change its proportions (the higher the number/s, the smaller)
current_statistics_photo1 = PhotoImage(file = 'Images\\live graph.png')
current_statistics_photo2 = current_statistics_photo1.subsample(20, 20)

def current_statistics(event):
    ''' This function creates a new window within the main window, passes an event(left mouse click), and creates a text heading'''

    # Create a sub-window for the current statistics function. Make it so that other windows cannot be clicked, change the title of the window, and set its colour.
    root = Toplevel(window)
    root.grab_set()
    root.title('Current Statistics')
    root.configure(background = '#B1F59A')
    Label(root, text = 'Current statistics for a stock!').grid()
    Label(root, text = 'INCOMPLETE').grid()

'''
Create a button and set its parameters,
define its placement within the grid,
and bind the button to an event (left mouse click) that calls a function.
'''
live_graph_button = Button(window, image = current_statistics_photo2, compound = LEFT, text = 'Current statistics', width = 180)
live_graph_button.grid(row = 2, columnspan=2, pady = 1)
live_graph_button.bind('<Button-1>', current_statistics)

def news_feed(event):
    ''' This function creates a new window within the main window, passes an event(left mouse click), and creates a text heading'''

    # Create a sub-window for the news feed function. Make it so that other windows cannot be clicked, change the title of the window, and set its colour.
    root = Toplevel(window)
    root.grab_set()
    root.title('News Feed')
    root.configure(background = '#B1F59A')

    # Create the label for the window headine
    menu_heading = Label(root, text='News feed', font='bold', relief=RIDGE, width=13, borderwidth=7)
    menu_heading.grid(row=0, column=0, columnspan=3, pady=2.5)

    # Create a variable of the selected radio button
    button_choice = IntVar()

    def selection():
        ''' This function gets the activated radio button and calls its corresponding function.'''

        # Get the value of the activated radio button, and call its corresponding function
        news_choice = button_choice.get()

        # If the user's choice is industry news, ask them which feed they would like (E.g. Stock market),
        if news_choice == 0:
            # grab the corresponding url segment to the user's feed choice from the dictionary,
            industry_news()
        # If the user's choice is the second button, call the company news function
        elif news_choice == 1:
            company_news()

    def industry_news():
        ''' This function creates a new window within the main window, and displays industry news'''

        # Create a sub-window for the industry news function. Make it so that other windows cannot be clicked, change the title of the window, and set its colour.
        industry_window = Toplevel(root)
        industry_window.grab_set()
        industry_window.title('Industry News Feed')
        industry_window.configure(background = '#B1F59A')

        # Create the label for the sub-window heading
        industry_heading = Label(industry_window, text='Industry news', font='bold', relief=RIDGE, width=13, borderwidth=7)
        industry_heading.grid(row=0, column=0, columnspan=5, pady=2.5)

        # Create the variable for the dropdown menu options
        industry_choice = StringVar(industry_window)
        # Set the initial value of the dropdown menu, unclickable
        industry_choice.set("Select")

        # Create the message instructing the user of what to do
        selection_message = Message(industry_window, text="Choose which industry of news you wish to view.", width=180, bg = '#B1F59A')
        selection_message.grid(row=1, column=0, columnspan=5)

        # Create a list with the menu options
        unsorted_news_options = ["Stock Market", "Bond Market", "Currency News", "Commodities Market", "Top Stories", "International", "Economic News"]

        # Sort the menu options in alphabetical order
        sorted_news_options = sorted(unsorted_news_options)

        # Create the dropdown menu, and define the options within it
        menu_options = OptionMenu(industry_window, industry_choice, *sorted_news_options)
        menu_options.grid(row=2, column=0, columnspan=5, pady = 5)

        # Create a dictionary containing the industry news areas and their corresponding url segments
        news_areas = {'Stock Market': 'category-stocks',
                      'Top Stories': 'topic-top-stories',
                      'International': 'category-international',
                      'Economic News': 'category-economic-news',
                      'Bond Market': 'category-bonds',
                      'Currency News': 'category-currencies',
                      'Commodities Market': 'category-commodities'}

        def sort_dictionary(news_areas):
            '''This function sorts the news areas dictionary in alphabetical order by key.'''

            # Sort the dictionary alphabetically by key, using the first index as reference
            sorted_news_areas = sorted(news_areas.items(), key = lambda t: t[0])

        # Call the function to sort the news areas dictionary
        sort_dictionary(news_areas)

        def industry_news_handling():
            '''This function gets the user's choice from the dropdown menu,
            reads from the corresponding text file, and outputs its contents
            to the message box below once the users presses the 'OK' button.
            '''

            # Create a variable of the chosen dropdown menu option
            industry_sector = industry_choice.get()
            # grab the corresponding url segment to the user's feed choice from the dictionary,
            news_choice_url = news_areas[industry_sector]
            # set the url variable using by inserting this segment into the API url,
            rss_url = feedparser.parse('https://au.finance.yahoo.com/news/' + news_choice_url + '/?format=rss')
            # and call the feed parsing function.
            parse_industry_feed(news_feed_message, rss_url)

        # Create the message where the news elements will be output to
        news_feed_message = Message(industry_window, text='', width=500, borderwidth=5, justify=LEFT, relief=RAISED)
        news_feed_message.grid(row=4, column=0, columnspan=6, pady=5)

        # Create the button that the user clicks to confirm their choice
        selection_button = Button(industry_window, text="OK", command=industry_news_handling)
        selection_button.grid(row=3, column=0, columnspan=6)

    def read_industry_file(news_feed_message):
        '''This function reads the news file and outputs its contents to the message widget.'''

        # Open the file to read from
        with open('Text Files\\industryNews.txt', mode = 'r') as inFile:
            # Define a variable as the contents of the opened file
            news_data_read = inFile.read()
            # Print a new line
            print('\n')
        # Change the text of the message widget to the contents of the file
        news_feed_message.configure(text = news_data_read)


    def parse_industry_feed(news_feed_message, rss_url):
        '''This function gets the industry news data from the Yahoo! Finance RSS API.'''

        # Define the feed to parse news data from, and set it as a variable
        feed = feedparser.parse(rss_url)

        # Open the file to write to
        with open('Text Files\\industryNews.txt', mode = 'w') as outFile:

            # Create an empty list that the news data will be added to before it is written to the file
            news_data_write = []
            # Initialise a count
            count = 0
            # For ten articles, add their title, link, and published date to the list, with a new line after each
            for count in range(10):
                news_data_write.append(feed['entries'][count].title)
                news_data_write.append(feed['entries'][count].link)
                news_data_write.append(feed['entries'][count].published[:-9])
                count = count + 1
                for item in news_data_write:
                    item = str(item)
                    outFile.write(item+'\n')
                # For each article, write a new line to the company news text file, so that each article's data is on its own line
                outFile.write('\n')
                # Clear the news_elements list so that data is not written to the file more than once
                del(news_data_write[:])
        # Close the file so that it can be utilised and will not corrupt
        outFile.close()

        # Call the function to read the file and output it to the user
        read_industry_file(news_feed_message)

    def read_company_file(news_feed_message):
        '''This function opens the companyNews text file and reads its contents, line by line'''

        # Open the file to read from
        with open('Text Files\\companyNews.txt', mode='r') as inFile:
            # Define a variable as the contents of the opened file
            news_data_read = inFile.read()
            # Print a new line
            print('\n')
        # Change the text of the message widget to the contents of the file
        news_feed_message.configure(text = news_data_read)

    def parse_company_feed(company_window, news_feed_message, rss_url):
        ''' This function parses the Yahoo! RSS API for data of the latest five articles, and writes it to the company news text file'''

        # Define the RSS feed to parse from, as the url passed in of the company the user chose
        feed = feedparser.parse(rss_url)

        try:
            # Define the file to write the news data to the company news text file
            with open('Text Files\\companyNews.txt', mode='w') as outFile:

                # Create a list to store the news data parsed from the Yahoo! RSS
                news_data_write = []
                # Initialise a count
                count = 0
                news_data_write.append((feed['feed']['description'])+'\n')
                # For the number of articles to append to the file, append the article's title, link, and published date to the news_elements list
                for count in range(10):
                    news_data_write.append(feed['entries'][count].title)
                    news_data_write.append(feed['entries'][count].published)
                    article_link = (feed['entries'][count].link)
                    article_link = article_link.split('*')[1]
                    news_data_write.append(article_link)
                    # Add one to the count, so that the next article is parsed
                    count+=1
                    # For each item in the news_elements list, convert it to a string and write it to the company news text file
                    for item in news_data_write:
                        item = str(item)
                        outFile.write(item+'\n')
                    # For each article, write a new line to the company news text file, so that each article's data is on its own line
                    outFile.write('\n')
                    # Clear the news_elements list so that data is not written to the file more than once
                    del(news_data_write[:])
        # If an error arises, output a message to the user to enter a valid input
        except (KeyError, AttributeError):
            error_message = Message(company_window, text='Please input a valid stock ticker in the entry box.', width=250, borderwidth=5, justify=LEFT, relief=RAISED)
            error_message.grid(row=6, columnspan=6, pady=2)
        # If there is no error, continue the program
        else:
            # Close the file so that it can be utilised and will not corrupt
            outFile.close()

        # Call the function to read the news file and output it
        read_company_file(news_feed_message)

    def company_news():
        ''' This function creates a new window within the main window, and displays company news'''

        # Create a sub-window for the company news function. Make it so that other windows cannot be clicked, change the title of the window, and set its colour.
        company_window = Toplevel(root)
        company_window.grab_set()
        company_window.configure(background = '#B1F59A')
        company_window.title('Company News Feed')

        # Create a label for the heading of the sub-window
        company_heading = Label(company_window, text = 'Company news', font = 'bold', relief = RIDGE, width = 13, borderwidth = 7)
        company_heading.grid(row=0, column=0, columnspan=6, pady=2.5)

        # Create the message instructing the user of what to do
        selection_message = Message(company_window, text="Enter a stock ticker below to see a company's latest news! E.g. 'TWTR' for Twitter.", width=260, bg = '#B1F59A')
        selection_message.grid(row=1, column=0, columnspan=6)

        def company_news_handling(company_ticker):
            ''' This function gets the input from the entry widget (stock ticker) to be graphed.'''

            # set the url variable by inserting the stock ticker into the API url,
            rss_url = ('http://finance.yahoo.com/rss/headline?s={0}'.format(company_ticker))
            # and call the feed parsing function.
            parse_company_feed(company_window, news_feed_message, rss_url)

        # Create the entry widget where the user enters a stock ticker, and define its location within the grid
        company_ticker_entry = Entry(company_window)
        company_ticker_entry.grid(row = 2, column = 0, columnspan = 6, padx = 10, pady = 5)

        def entry_handling():
            '''This function validates the input of the entry box, and if there is nothing entered, an error is outputted until a value is'''

            # Create a variable that equals the input from the entry widget
            company_ticker = company_ticker_entry.get()

            # Convert the input into a string
            company_ticker = str(company_ticker)

            # If the entry box is empty, output a message to the user to enter a stock ticker
            if company_ticker == '':
                news_feed_message.configure(text = 'Please input a stock ticker in the entry box.')
            # If there is no error, continue the program
            else:
                company_news_handling(company_ticker)

        # Create the button that the user presses when they wish to graph the data of the stock ticker they inputted in the entry widget
        graph_button = Button(company_window, text = 'SHOW', command = entry_handling, width = 10).grid(row = 3, column = 0, columnspan = 6)

        def ticker_list(event):
            '''This function opens the document in Google Drive that has a list of stock tickers, when an event occurs.'''

            webbrowser.open_new(r'https://docs.google.com/spreadsheets/d/1T-ZbfnxZUkXu-jC1_FFxX0c-_7AbJqJuizzdjH81UR4/edit?usp=sharing')

        # Create a label that the user can click to open a document in their web browser
        stock_ticker_link = Label(company_window,text='For a comprehensive collection of company stock tickers, please click this text.', bg='#B1F59A', width=60)
        stock_ticker_link.grid(row=5, column=0)
        # When the user clicks the text/label, run the function to open the document
        stock_ticker_link.bind('<Button-1>', ticker_list)

        # Create the message that the news elements will be output to
        news_feed_message = Message(company_window, text='', width=750, borderwidth=5, justify=LEFT, relief=RAISED)
        news_feed_message.grid(row=6, column=0, columnspan=6, pady = 5)


    # Create a radio button for the industry news option and define its placement within the grid
    industry_button = Radiobutton(root, text = 'Industry news', variable = button_choice, value = 0, indicatoron = 0, width = 20)
    industry_button.grid(row = 1, column = 0, columnspan = 3, pady = 5)

    # Create a radio button for the company news option and define its placement within the grid
    company_button = Radiobutton(root, text = 'Company news', variable = button_choice, value = 1, indicatoron = 0, width = 20)
    company_button.grid(row = 2, column = 0, columnspan = 3)

    # Create a button that the user presses to finalise their choice and that calls the selection function
    selection_button = Button(root, text="Select", command = selection, width = 15).grid(row = 3, column = 0, columnspan = 3, padx = 5, pady = 5)

    # Create a variable assigned to the location of the main image, and then change its proportions (the higher the number/s, the smaller)
    finance_news_image1 = PhotoImage(file = 'Images\\finance news.gif')
    finance_news_image2 = finance_news_image1.subsample(3, 3)

    # Create a variable for the main image of the menu, and define its placement within the grid
    main_photo = Label(root, image = finance_news_image2)
    main_photo.image = finance_news_image2
    main_photo.grid(row = 4, column = 0)

# Create a variable assigned to the location of an image, and then change its proportions (the higher the number/s, the smaller)
news_feed_photo1 = PhotoImage(file = 'Images\\news feed.gif')
news_feed_photo2 = news_feed_photo1.subsample(8, 8)

'''
Create a button and set its parameters,
define its placement within the grid,
and bind the button to an event (left mouse click) that calls the function to run the news feed option.
'''
news_feed_button = Button(window, image = news_feed_photo2, compound = LEFT, text = 'News feed', width = 180)
news_feed_button.grid(row = 3, columnspan=2, pady = 1)
news_feed_button.bind('<Button-1>', news_feed)


# Create a variable assigned to the location of an image, and then change its proportions (the higher the number/s, the smaller)
learn_photo1 = PhotoImage(file = 'Images\\learn.gif')
learn_photo2 = learn_photo1.subsample(7, 7)

def learn(event):
    ''' This function creates a new window within the main window, passes an event(left mouse click), and creates a text heading'''

    # Create a sub-window for the learn function. Make it so that other windows cannot be clicked, change the title of the window, and set its colour.
    root = Toplevel(window)
    root.grab_set()
    root.configure(background = '#B1F59A')
    root.title('Learn About Investing')

    # Create a variable for the user's choice from the dropdown menu
    menu_choice = StringVar(root)
    # Set the initial value of the dropdown, unclickable
    menu_choice.set("Select")

    # Create a label for the heading of the learn sub-window
    learn_heading = Label(root, text = 'Learn about investing', font = 'bold', relief = RIDGE, width = 20, borderwidth = 7)
    learn_heading.grid(row=0, column=0, columnspan=5, pady=2.5)

    # Create a message instructing the user of what to do
    selection_message = Message(root, text = "Choose which area of investing you'd like to learn by using the dropdown menu below!", width = 250, bg = '#B1F59A')
    selection_message.grid(row = 1, column = 0, columnspan = 5, pady = 5)

    # Create a list with menu options
    unsorted_learn_options = ["Mutual Funds", "Exchange Traded Funds (ETFs)", "Basics Of Investing 2", "Shares", "Options", "Futures", "Basics Of Investing 1", "Bonds"]

    # Sort the menu options in alphabetical order
    sorted_learn_options = sorted(unsorted_learn_options)

    # Create the dropdown menu, and define its contents/options
    menu_options = OptionMenu(root, menu_choice, *sorted_learn_options)
    menu_options.grid(row = 2, column = 0, columnspan = 5)

    def selection():
        '''This function gets the user's choice from the dropdown menu,
        reads from the corresponding text file, and outputs its contents
        to the message box below once the users presses the 'OK' button.
        '''

        # Define a variable and set it to the users selected dropdown option
        learn_area = menu_choice.get()
        # Define a variable and set it to the file that the user selected to learn about
        learn_file = open('Text Files\\Learn files\\{0}.txt'.format(learn_area))
        # Define a variable to the contents of the user's selected file
        learn_text = learn_file.read()
        # Close the file so that it can be utilised and will not corrupt
        learn_file.close()
        # Output the contents of the file to the message box
        learn_message.configure(text = learn_text)

    # Create a message widget that the user's selected file will output to
    learn_message = Message(root, text = '', width = 800, borderwidth = 5, justify = LEFT, relief = RAISED)
    learn_message.grid(row = 4, column = 0, columnspan = 5)

    # Create a button that the user will click to confirm their choice
    selection_button = Button(root, text="OK", command=selection)
    selection_button.grid(row = 3, column = 0, columnspan = 5, pady = 5)

'''
Create a button and set its parameters,
define its placement within the grid,
and bind the button to an event (left mouse click) that calls a function.
'''
learn_button = Button(window, image=learn_photo2, compound=LEFT, text = 'Learn about investing', width = 180)
learn_button.grid(row = 4, columnspan = 2, pady = 1)
learn_button.bind('<Button-1>', learn)

def about(event):
    ''' This function creates a new window within the main window, passes an event(left mouse click), and creates a text heading'''

    # Create a sub-window for the about function. Make it so that other windows cannot be clicked, change the title of the window, and set its colour.
    root = Toplevel(window)
    root.grab_set()
    root.configure(background = '#B1F59A')
    root.title('About This Program')

    # Create a label for the heading of the about sub-window
    about_heading = Label(root, text = 'ABOUT THIS PROGRAM', font = 'bold', relief = RIDGE, width = 20, borderwidth = 7)
    about_heading.grid(row = 0, column = 1, columnspan = 4, pady = 2.5)

    # Define a variable to the about file
    about_file = open('Text Files\\About.txt')
    # Define a variable and set it to the contents of the about file
    about_text = about_file.read()
    # Close the file so that it can be utilised and will not corrupt
    about_file.close()

    # Create a message that the about file will output its contents to
    about_message = Message(root, text = about_text, width = 500, borderwidth = 5, justify = LEFT, relief = RAISED)
    about_message.grid(row = 1, column = 0, columnspan = 6, padx = 5, pady = 2.5)

'''
Create a button and set its parameters,
define its placement within the grid,
and bind the button to an event (left mouse click) that calls a function.
'''
about_button = Button(window, compound=LEFT, text = 'About', width = 26)
about_button.grid(row = 5, columnspan = 2, pady = 1)
about_button.bind('<Button-1>', about)

# Run the whole program
window.mainloop()
