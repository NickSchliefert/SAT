import matplotlib.pyplot as plt
import numpy as np
import urllib
# Import the matplotlib dates converter
import matplotlib.dates as mdates
from matplotlib import style


# This decoding stuff is okay not to understand, it is only needed due to matplotlib
# Define the function to convert the jargon date structure, to a legible structure
# fmt equals format, which is the format of the date stamp ('%Y%m%d'), encoding is utf-8, needed for the internet data
def bytespdate2num(fmt, encoding = 'utf-8'):
# The string converter is equal to strip date to number, based on the format
    strconverter = mdates.strpdate2num(fmt)
# Define the bytes converter to convert bytes, b equals bytes
    def bytesconverter(b):
# s equals string, decode the bytes, using the encoding (utf-8)
        s = b.decode(encoding)
# Return the string converter of element 's'
        return strconverter(s)
# Return the bytes converter
    return bytesconverter


# Define the function to grab data for a specific inputted stock
def graph_data(stock):

# Figure stated so that it can be modified
    fig = plt.figure()
# Create axis 1 subplot, with a 1 by 1 grid, starting point of the grid is 0 by 0
    ax1 = plt.subplot2grid((1,1), (0,0))

# The stock price URL to grab the stock data from, 'stock' is the inputted stock symbol
    stock_price_url = 'http://chartapi.finance.yahoo.com/instrument/1.0/'+stock+'/chartdata;type=quote;range=10y/csv'
# Use the urllib method and open the stock price url to read and use
    source_code = urllib.request.urlopen(stock_price_url).read().decode()
# Create a list to store the stock data pulled from the internet
    stock_data = []
# Split the data pulled from the source code with a new line
    split_source = source_code.split('\n')

# Because the source code data we want has 6 items (date, close price, high price, low price, open price, and volume of stock),
# that is split by commas, we need to filter out all other lines without these characteristics
    for line in split_source:
# So, for each line in the source code, split with a comma,
        split_line = line.split(',')
# and if the length of the line is 6 items,
        if len(split_line) == 6:
# and if the vales and labels are not in the line, append the data to the stock_data list
# This filters every line out that does not contain stock data, so that only stock data is appended to the list
            if 'values' not in line and 'labels' not in line:
                stock_data.append(line)

# Load the 6 items of data from the stock_data list, using numpy. Must state the delimiter, and to unpack the data.
    date, closep, highp, lowp, openp, volume = np.loadtxt(stock_data,
                                                          delimiter = ',',
                                                          unpack = True,
                                                          # %Y = full year 2015
                                                          # %y = partial year 15
                                                          # %m = number month
                                                          # %H = hours
                                                          # %M = minutes
                                                          # %S = seconds
                                                          # 12-06-2014 = %m-%d-%Y
# Using the converter function created above, convert the date (index 0 equals the date) from the yyyy:mm:dd structure, to a legible structure
                                                          converters = {0: bytespdate2num('%Y%m%d')})

# For the x axis 1 subplot, plot the date, and the close price of the stock, '-' plots the data as a line, label is the legend label
    ax1.plot_date(date, closep, '-', label = 'Price')
# Set a grid for the x axis 1 subplot, '-' makes the grid a solid line
    ax1.grid(True)
    plt.xlabel('Date')
    plt.ylabel('Price ($)')
    plt.title('{0} price over time' .format(stock))
    plt.show()

print()
stock = input('Stock ticker: ')
stock = stock.upper()
graph_data(stock)
